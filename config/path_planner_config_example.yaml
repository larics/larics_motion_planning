path_planner:
  spaces:
    # We are planning for UAV only, this means one space(x, y, z, yaw)
    number: 1
    # There are 4 dimensions we plan for.
    dimensions: [3]
    # Weights are important when using multiple spaces
    weights: [1.0]
    # Types of spaces used
    types: ["RealVector"]
    # Bounds are defined by 
    bounds: [[[-10.0, 10.0], [-20.0, 20.0], [-1.0, 1.0]]]

  # RRT* parameter set

  # This sets longest segment that does not need to be checked for collisions.
  # The trick is that this is actually a fraction of state space maximum
  # extent. To transfer to metric we can divide our resolution with max extent
  # to get the fraction that corresponds to resolution in meters. If you want 
  # to use it as fraction of maximum space extent set is_metric: false
  longest_valid_segment:
    is_used: true
    is_metric: true
    value: 0.01
  # Probability the planner will choose the goal state.
  goal_bias:
    is_used: true
    value: 0.05
  # Maximum length of a motion added in the tree of motions.
  range:
    is_used: true
    value: 0.5
  # Rewiring scale factor
  rewire_factor:
    is_used: false
    value: 1.1
  # Delays collision checking procedures. If set to false this checks
  # collisions between neighbor nodes and tries to find the nearest. If set
  # to true it stops when it has found the first collision free neighbor which
  # in turn reduces computation time. Default was set to true.
  delay_cc:
    is_used: true
    value: true
  # Controls if the tree will be pruned or not. If set to true, pruning(
  # removing a vertex) will occur only if the vertex and all its decendants
  # satisfy the pruning condition. Default is false
  tree_pruning: 
    is_used: true
    value: false
  # Prune only if the new solution is X% better than the old solution. 0 will
  # prune after every new solution, 1.0 will never prune. Default is 0.05.
  prune_threshold:
    is_used: true
    value: 0.1
  # Use the measure of the pruned subproblem instead of the measure of the
  # entire problem domain(if it exists). Sounds like it's best to leave that
  # on default value which is false.
  pruned_measure:
    is_used: true
    value: false
  # Use a k-nearest search for rewiring instead of a r-disc search. Default is
  # true so we use k-nearest search.
  k_nearest:
    is_used: true
    value: true
  # Time we give to RRT* algorithm to solve the problem. Note that solution may
  # be found even before time limit, in that case planner still searches for 
  # optimal solution until time limit.
  solve_time:
    # In case is_incremental: true, "time" is the time limit for search. The 
    # time for solution will be "increment" seconds and will be increased by
    # increment until solution is found or it reaches "time" limit. 
    # If is_incremental is set to false, "time" becomes time limit and only
    # one search is conducted.
    is_incremental: true
    time: 1.0
    increment: 0.25

  # After path is found, OMPL can simplify it and smooth it out.
  path_simplifier:
    # Reducing vertices removes some waypoints from path.
    reduce_vertices:
      # Flag if we want to use it
      is_used: true
      # This is fractional, max_steps will be x*number_of_waypoints in path
      # that RRT* algorithm provided. It can also be set to fixed value.
      max_steps: 0.25
      # Empty step happens when no vertices are removed. The simplifier stops
      # when this happens n times.
      max_empty_steps: 0
      # This is maximum distance between two states that shortcutting is 
      # attempted for. It is fraction of total path length.
      range_ratio: 0.33
      # If we set  this to false, max_steps and max_empty_steps must be integer
      # that defines number of steps for shortcutting.
      use_as_fraction: true

    # Path can also be smoothed out
    smooth_b_spline:
      is_used: true
      # How many times will the algorithm go thorugh whole path and smooth it
      # out.
      max_steps: 5