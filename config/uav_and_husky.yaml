global_planner:
  map_config_file: "catkin_ws/src/larics_motion_planning/config/uav_and_husky.yaml"
  trajectory_config_file: "catkin_ws/src/larics_motion_planning/config/uav_and_husky.yaml"
  path_planner_config_file: "catkin_ws/src/larics_motion_planning/config/uav_and_husky.yaml"
  state_validity_checker_config_file: "catkin_ws/src/larics_motion_planning/config/uav_and_husky.yaml"
  kinematics_config_file: "catkin_ws/src/larics_motion_planning/config/uav_and_husky.yaml"

  trajectory:
    restarts: 5

  path_and_trajectory:
    restarts: 5

  path:
    restarts: 5
    collision_check_restarts: 5
    collision_check: true

  # Not used but still some data is needed
  parabolic_airdrop:
    # Parabola family parameters.
    # d is dropoff distance projected onto xy plane
    d: [3.0, 3.0, 2.0, 3.5, 1.5, 4.0, 1.0, 4.5, 5.0, 5.5, 6.0]
    # v is linear speed of the projectile in airdrop direction
    v: [3.0, 3.0, 2.0, 3.5, 1.5, 4.0, 1.0, 4.5, 5.0, 5.5, 6.0]
    # alpha is angle at which the projectile is launched
    alpha: [0.0, 25.0, 15.0, 30.0, 10.0, 5.0, 0.0, 35.0, 40.0, 45.0]
    # We search for all 360 degrees for the direction of parabola. This 
    # parameter defines increment in degrees
    yaw_increment: 90 #22.5
    # Maximum difference in height between dropoff and final parabola point.
    # Candidates with larger difference will be discarded.
    max_dz: 50
    # Parabola is planned for payload which is typically below the vehicle.
    # That's why we have offset in z-axis while planning the trajectory for
    # the uav.
    payload_z_offset: 0.1

    # Stopping trajectory parameters [x, y, z, yaw]
    stopping_velocity: [8, 8, 3, 2]
    stopping_acceleration: [4.0, 4.0, 1.5, 2.0]
    use_horizontal_stopping_acceleration: false
    horizontal_stopping_acceleration: 4.0
    # Dropoff trajectory parameters [x, y, z, yaw]
    dropoff_velocity: [4, 4, 3, 2.0]
    dropoff_acceleration: [1.5, 1.5, 1.0, 1.0]
    use_horizontal_dropoff_acceleration: false
    horizontal_dropoff_acceleration: 2.0
    # Common for both trajectories is acceleration between dropoff and stopping
    # trajectories. The idea is to have a positive z-direction acceleration so
    # the uav does not interact with dropped object. [x, y, z, yaw]
    intermediate_acceleration: [0, 0, 0, 0]
    use_horizontal_intermediate_acceleration: false
    horizontal_intermediate_acceleration: 1.0

    spline_sampling_time: 0.01

octomap:
  path_to_file: "catkin_ws/src/larics_gazebo_worlds/models/greenhouse/greenhouse4096.binvox.bt"
  search_depth: 16

path_planner:
  spaces:
    number: 2
    # UAV has 6 dof: x, y, z, roll, pitch, yaw. We don't use roll and pitch in
    # planning, however we use them in visualization and later in compensation
    # so we need all 6DOF.
    # Manipulator has 3DOF in this case
    dimensions: [6, 2]
    weights: [1.0, 1.0]
    types: ["RealVector", "RealVector"]
    bounds: [[[-10, 10.0], [-10.0, 10.0], [0.0, 10.0], [0.0, 0.0], [0.0, 0.0], [-3.15, 3.15]], [[-10.0, 10.0], [-10.0, 10.0]]]
    #bounds: [[[0, 10.0], [-20.0, 0.0], [0.95, 1.05]], [[-1.57, 1.57], [-1.57, 1.57], [-1.57, 1.57]]]
  #bounds: [[0, 10.0], [-20.0, 0.0], [0.95, 1.05]]
  longest_valid_segment:
    is_used: true
    is_metric: true
    value: 0.01
  goal_bias:
    is_used: true
    value: 0.05
  range:
    is_used: true
    value: 0.5
  rewire_factor:
    is_used: false
    value: 1.1
  delay_cc:
    is_used: true
    value: true
  tree_pruning: 
    is_used: true
    value: false
  prune_threshold:
    is_used: true
    value: 0.1
  pruned_measure:
    is_used: true
    value: false
  k_nearest:
    is_used: true
    value: true
  solve_time:
    is_incremental: true
    time: 1.0
    increment: 0.25
  path_simplifier:
    reduce_vertices:
      is_used: true
      max_steps: 0.25
      max_empty_steps: 0
      range_ratio: 0.33
      use_as_fraction: true
    smooth_b_spline:
      is_used: true
      max_steps: 5

trajectory_planner:
  toppra_trajectory:
    velocities: [0.8, 0.8, 0.5, 100, 100, 0.3, 0.3, 0.3] #4.8
    accelerations: [0.8, 0.8, 0.4, 100, 100, 0.3, 0.15, 0.15] #10
    is_angular: [0, 0, 0, 0, 0, 0, 0, 0]
    sampling_frequency: 100.0

state_validity_checker:
  type: "point"
