<launch>
  <arg name="planner_rate" default="10" />
  <arg name="namespace" default="planner" />
  <arg name="model_namespace" default="model_planner" />

  <!-- Before launching this file you need to launch planning context-->
  <!-- roslaunch wp_manipulator planning_context.launch -->

  <group ns="$(arg namespace)">
    <!-- Global planner generates path and/or trajectory based on desired waypoints.-->
    <node name="global_planner" pkg="larics_motion_planning" type="global_planner_node" output="screen">
      <param name="rate" value="$(arg planner_rate)" />
      <param name="global_planner_config_file" value="$(find larics_motion_planning)/config/cooperative_transport_uav_wp_manipulator.yaml" />
      <param name="model_uav_namespace" value="$(arg model_namespace)" />
      <param name="model_animation_dt_us" value="10" />

      <!-- visualization parameters -->
      <param name="state_scale" value="0.05" />
      <param name="waypoints_scale" value="0.5" />
    </node>

    <!-- Simple tracker that receives trajectory and sends it to the UAV. It also publishes current vehicle state.-->
    <node name="joint_trajectory_reference_tracker" pkg="larics_motion_planning" type="joint_trajectory_reference_tracker.py" output="screen">
      <!--remap from="reference_tracker/joint_trajectory_point" to="aerial_manipulator_control/trajectory_ref_input" /-->
      <remap from="reference_tracker/joint_trajectory" to="joint_trajectory" />
    </node>

    <!-- Node that plans a straight trajectory to the end point upon request. -->
    <node name="go_to_reference" pkg="larics_motion_planning" type="go_to_reference.py" output="screen">
      <remap from="go_to/trajectory_request" to="multi_dof_trajectory" />
      <remap from="go_to/joint_trajectory" to="joint_trajectory" />
      <remap from="go_to/current_state" to="reference_tracker/current_reference" />
    </node>

    <!-- Trajectory decomposition to two UAVs -->
    <node name="cooperative_transport_two_uavs_handler" pkg="larics_motion_planning" type="cooperative_transport_two_uavs_handler.py" output="screen">
      <param name="first_uav_namespace" value="/uav1" />
      <param name="second_uav_namespace" value="/uav2" />
      <param name="manipulator_dof" value="5" />

      <remap from="cooperative_transport_two_uavs_trajectory_handler/joint_trajectory_point_in" to="reference_tracker/joint_trajectory_point" />
    </node>

    <node name="generate_toppra_trajectory" pkg="topp_ros" type="generate_toppra_trajectory.py" output="screen" />

    <!--node name="octomap_server_node" pkg="octomap_server" type="octomap_server_node" args="$(find larics_gazebo_worlds)/models/greenhouse_row/greenhouse_row.binvox.bt" output="screen">
      <param name="frame_id" value="world" />
    </node-->

    <node name="map_to_world_transform_publisher" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 world map 10" />

  </group>

  <!-- This is the part where we get corrections based on model -->
  <group ns="$(arg model_namespace)">
    <node name="global_planner" pkg="larics_motion_planning" type="global_planner_node" output="screen">
      <param name="rate" value="$(arg planner_rate)" />
      <param name="global_planner_config_file" value="$(find larics_motion_planning)/config/cooperative_transport_uav_wp_manipulator.yaml" />
      <param name="model_uav_namespace" value="/none" />

      <!-- visualization parameters -->
      <param name="state_scale" value="0.05" />
      <param name="waypoints_scale" value="0.5" />
    </node>

    <node name="joint_trajectory_reference_tracker" pkg="larics_motion_planning" type="joint_trajectory_reference_tracker.py" output="screen">
      <!--remap from="reference_tracker/joint_trajectory_point" to="aerial_manipulator_control/trajectory_ref_input" /-->
      <remap from="reference_tracker/joint_trajectory" to="joint_trajectory" />
    </node>

    <node name="go_to_reference" pkg="larics_motion_planning" type="go_to_reference.py" output="screen">
      <remap from="go_to/trajectory_request" to="multi_dof_trajectory" />
      <remap from="go_to/joint_trajectory" to="joint_trajectory" />
      <remap from="go_to/current_state" to="reference_tracker/current_reference" />
    </node>

    <!-- Trajectory decomposition to two UAVs -->
    <node name="cooperative_transport_two_uavs_handler" pkg="larics_motion_planning" type="cooperative_transport_two_uavs_handler.py" output="screen">
      <param name="first_uav_namespace" value="/model_uav1" />
      <param name="second_uav_namespace" value="/model_uav2" />
      <param name="manipulator_dof" value="5" />

      <remap from="cooperative_transport_two_uavs_trajectory_handler/joint_trajectory_point_in" to="reference_tracker/joint_trajectory_point" />
    </node>

    <node name="generate_toppra_trajectory" pkg="topp_ros" type="generate_toppra_trajectory.py" output="screen" />

  </group>

</launch>