# Simulation for asap manipulator
# USAGE:
# 1) Use without impedance (trajectory only)
#   tmuxinator start -p asap_manipulator_sim.yaml 
# 2) Use with impedance
#   tmuxinator start -p asap_manipulator_sim.yaml use_impedance=true
# NOTES:
# 1) Setting force up to 2N was achievable by the manipulator
name: asap_manipulator_sim
root: ./
#startup_window: roscore
pre_window: |
  cd ~/; 
  export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:$HOME/uav_ws/src/larics_gazebo_worlds/models;
  export USE_IMPEDANCE=<%= @settings["use_impedance"]%>;
  if [[ -z "${USE_IMPEDANCE}" ]]
  then 
    export USE_IMPEDANCE="false"
  fi;
  if [ "$USE_IMPEDANCE" == "false" ]
  then
    START_TRAJECTORY_DEQUEUE="true"
    REFERENCE_DELAY=12
  else
    START_TRAJECTORY_DEQUEUE="false"
    REFERENCE_DELAY=35
  fi;
windows:
  - roscore_gazebo:
      layout: tiled
      panes:
        - roscore
        - waitForRos; 
          roslaunch gazebo_ros empty_world.launch 
          use_sim_time:=true paused:=false
        # Optional world elements
        - 
          waitForRos; 
          waitForSimulation; 
          roslaunch asap_manipulator_4r planning_context.launch;
          roslaunch larics_gazebo_worlds spawn_takeoff_pad.launch;
          roslaunch larics_gazebo_worlds spawn_cylinder.launch x:=2.75 z:=0.8 cylinder_length:=0.01 cylinder_radius:=1.0 pitch:=1.5707963
  - uavs:
      layout: tiled
      panes:
        - 
          waitForSimulation; 
          sleep 8; 
          roslaunch mmuav_gazebo uav_attitude_position.launch 
            start_gazebo:=false 
            manipulator_type:="asap_manipulator_4r" z:=1 
            manipulator_tool:="rod" name:="uav"
            collision_bitmask:=1
            start_trajectory_dequeue:=$START_TRAJECTORY_DEQUEUE
        - 
          waitForSimulation; 
          sleep 8; 
          roslaunch mmuav_gazebo uav_attitude_position.launch 
            start_gazebo:=false 
            manipulator_type:="asap_manipulator_4r" z:=1 
            manipulator_tool:="rod" name:="model_uav" 
            collision_bitmask:=2
            start_trajectory_dequeue:=$START_TRAJECTORY_DEQUEUE
        - >
          waitForSimulation; 
          sleep 16; 
          rosservice call /gazebo/delete_model "model_name: "takeoff_pad"";
          exit
  - motion_planning:
      layout: tiled
      panes:
        - waitForSimulation; sleep 5; 
          roslaunch larics_motion_planning arducopter_asap_manipulator_4r.launch
          use_impedance:=$USE_IMPEDANCE
        - |
          waitForSimulation; sleep $REFERENCE_DELAY; rostopic pub -1 /model_uav/reference_tracker/set_current_trajectory_point trajectory_msgs/JointTrajectoryPoint "
          positions: [0, 0, 1.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
          velocities: [0]
          accelerations: [0]
          effort: [0]
          time_from_start: {secs: 0, nsecs: 0}";
          rostopic pub -1 /model_uav/go_to/reference/joint_trajectory_point trajectory_msgs/JointTrajectoryPoint "
          positions: [0, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 0, 0, 0, 0, 0, 0, 1]
          velocities: [0]
          accelerations: [0]
          effort: [0]
          time_from_start: {secs: 0, nsecs: 0}"
        - |
          waitForSimulation; sleep $REFERENCE_DELAY; rostopic pub -1 /uav/reference_tracker/set_current_trajectory_point trajectory_msgs/JointTrajectoryPoint "
          positions: [0, 0, 1.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
          velocities: [0]
          accelerations: [0]
          effort: [0]
          time_from_start: {secs: 0, nsecs: 0}";
          rostopic pub -1 /uav/go_to/reference/joint_trajectory_point trajectory_msgs/JointTrajectoryPoint "
          positions: [0, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 0, 0, 0, 0, 0, 0, 1]
          velocities: [0]
          accelerations: [0]
          effort: [0]
          time_from_start: {secs: 0, nsecs: 0}"
  - running:
      layout: tiled
      panes:
        - |
          history -s "rosservice call /uav/model_correction_trajectory \"waypoints:
            header:
              seq: 0
              stamp: {secs: 0, nsecs: 0}
              frame_id: ''
            joint_names: ['']
            points:
            - positions: [0, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 0, 0, 0, 0, 0, 0, 1]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
            - positions: [2, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 0, 0, 0, 0, 0, 0, 1]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
          publish_path: false
          publish_trajectory: true
          plan_path: false
          plan_trajectory: true
          override_dynamic_constraints: false
          velocity_constraints: [0]
          acceleration_constraints: [0]\""; echo -e "\033[0;32mPlan trajectory without force."
        - |
          history -s "rosservice call /uav/model_correction_trajectory \"waypoints:
            header:
              seq: 0
              stamp: {secs: 0, nsecs: 0}
              frame_id: ''
            joint_names: ['']
            points:
            - positions: [0, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 0, 0, 0, 0, 0, 0, 1]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
            - positions: [2, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 2.0, 0, 0, 0, 0, 0, 1]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
          publish_path: false
          publish_trajectory: true
          plan_path: false
          plan_trajectory: true
          override_dynamic_constraints: false
          velocity_constraints: [0]
          acceleration_constraints: [0]\""; echo -e "\033[0;32mPlan trajectory with force in X axis. Only UAV is impedant."
        - |
          history -s "rosservice call /uav/model_correction_trajectory \"waypoints:
            header:
              seq: 0
              stamp: {secs: 0, nsecs: 0}
              frame_id: ''
            joint_names: ['']
            points:
            - positions: [0, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 0, 0, 0, 0, 0, 0, 1]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
            - positions: [2, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 2.0, 0, 0, 0, 0, 0, 0]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
          publish_path: false
          publish_trajectory: true
          plan_path: false
          plan_trajectory: true
          override_dynamic_constraints: false
          velocity_constraints: [0]
          acceleration_constraints: [0]\""; echo -e "\033[0;32mPlan trajectory with force in X axis. Only manipulator is impedant."
        - |
          history -s "rosservice call /uav/model_correction_trajectory \"waypoints:
            header:
              seq: 0
              stamp: {secs: 0, nsecs: 0}
              frame_id: ''
            joint_names: ['']
            points:
            - positions: [0, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 0, 0, 0, 0, 0, 0, 1]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
            - positions: [2, 0, 1, 0, 0, 0, 0.0, -0.5, 1, -0.5, 2.0, 0, 0, 0, 0, 0, 0.5]
              velocities: [0]
              accelerations: [0]
              effort: [0]
              time_from_start: {secs: 0, nsecs: 0}
          publish_path: false
          publish_trajectory: true
          plan_path: false
          plan_trajectory: true
          override_dynamic_constraints: false
          velocity_constraints: [0]
          acceleration_constraints: [0]\""; echo -e "\033[0;32mPlan trajectory with force in X axis. Both UAV and manipulator are impedant. Alpha=0.5."
  - impedance_control:
      layout: tiled
      panes:
        - |
          if [ "$USE_IMPEDANCE" == "false" ] 
          then 
            exit
          fi;
          waitForSimulation; sleep 22;
          roslaunch asap_manipulator_4r planning_context.launch;
          roslaunch impedance_control impedance_control_asap_4r_sim.launch namespace:="uav"
        - |
          if [ "$USE_IMPEDANCE" == "false" ] 
          then 
            exit
          fi;
          waitForSimulation; sleep 22;
          roslaunch asap_manipulator_4r planning_context.launch;
          roslaunch impedance_control impedance_control_asap_4r_sim.launch namespace:="model_uav"
        - |
          if [ "$USE_IMPEDANCE" == "false" ] 
          then 
            exit
          fi;
          waitForSimulation; sleep 30;
          rosservice call /uav/force_filter/zero_all "{}";
          rosservice call /uav/aerial_manipulator_control/start "data: true";
          exit;
        - |
          if [ "$USE_IMPEDANCE" == "false" ] 
          then 
            exit
          fi;
          waitForSimulation; sleep 30;
          rosservice call /model_uav/force_filter/zero_all "{}";
          rosservice call /model_uav/aerial_manipulator_control/start "data: true";
          exit;
  - logging:
      layout: tiled
      panes:
        - |
          if [ ! -d "$HOME/bags/asap_manipulator_sim" ];
          then
            mkdir $HOME/bags/asap_manipulator_sim;
          fi;
          cd ~/bags/asap_manipulator_sim;
          history -s "rosbag record -a --chunksize=64 -x \"/(.*)(gazebo|camera|bias|joint_states|parameter_descriptions|parameter_updates)(.*)\" -o asap_manipulator_sim"